CREATE TABLE Roles (role_id SERIAL PRIMARY KEY, role_name VARCHAR(50) NOT NULL UNIQUE);

CREATE TABLE Users (user_id SERIAL PRIMARY KEY, role_id INT REFERENCES Roles(role_id), name VARCHAR(100) NOT NULL, email VARCHAR(255) UNIQUE NOT NULL, password_hash VARCHAR(255) NOT NULL);

CREATE TABLE Shops (shop_id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, address TEXT, owner_id INT REFERENCES Users(user_id));

CREATE TABLE Items (item_id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10, 2) NOT NULL, category_id INT, shop_id INT REFERENCES Shops(shop_id));

CREATE TABLE Orders (order_id SERIAL PRIMARY KEY, user_id INT REFERENCES Users(user_id), total_price DECIMAL(10, 2) NOT NULL, order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE OrderItems (order_item_id SERIAL PRIMARY KEY, order_id INT REFERENCES Orders(order_id), item_id INT REFERENCES Items(item_id), quantity INT NOT NULL CHECK(quantity > 0));

ALTER TABLE Orders ADD COLUMN status VARCHAR(50) NOT NULL DEFAULT 'pending';

CREATE TABLE Inventory (inventory_id SERIAL PRIMARY KEY, shop_id INT REFERENCES Shops(shop_id), item_id INT REFERENCES Items(item_id), quantity INT NOT NULL CHECK(quantity >= 0), UNIQUE (shop_id, item_id));

CREATE TABLE Categories (category_id SERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL UNIQUE);

ALTER TABLE Items ADD CONSTRAINT fk_items_categories FOREIGN KEY (category_id) REFERENCES Categories(category_id);

CREATE TABLE Notifications (notification_id SERIAL PRIMARY KEY, user_id INT REFERENCES Users(user_id), message TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE UsersShops (user_id INT REFERENCES Users(user_id), shop_id INT REFERENCES Shops(shop_id), role_id INT REFERENCES Roles(role_id), PRIMARY KEY (user_id, shop_id));

CREATE TABLE OrderShops (order_id INT REFERENCES Orders(order_id), shop_id INT REFERENCES Shops(shop_id), PRIMARY KEY (order_id, shop_id));

ALTER TABLE OrderItems ADD COLUMN shop_id INT REFERENCES Shops(shop_id);

ALTER TABLE Users ADD CONSTRAINT fk_users_roles FOREIGN KEY (role_id) REFERENCES Roles(role_id);

